// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../three

declare module 'fairygui-three' {
    export { GGroup } from "fairygui-three/ui/GGroup";
    export { GObject } from "fairygui-three/ui/GObject";
    export { GGraph } from "fairygui-three/ui/GGraph";
    export { GImage } from "fairygui-three/ui/GImage";
    export { GMovieClip } from "fairygui-three/ui/GMovieClip";
    export { GRoot } from "fairygui-three/ui/GRoot";
    export { GTextField } from "fairygui-three/ui/GTextField";
    export { GRichTextField } from "fairygui-three/ui/GRichTextField";
    export { GTextInput } from "fairygui-three/ui/GTextInput";
    export { GLoader } from "fairygui-three/ui/GLoader";
    export { GLoader3D } from "fairygui-three/ui/GLoader3D";
    export { GComponent } from "fairygui-three/ui/GComponent";
    export { GLabel } from "fairygui-three/ui/GLabel";
    export { GButton } from "fairygui-three/ui/GButton";
    export { GComboBox } from "fairygui-three/ui/GComboBox";
    export { GSlider } from "fairygui-three/ui/GSlider";
    export { GProgressBar } from "fairygui-three/ui/GProgressBar";
    export { GScrollBar } from "fairygui-three/ui/GScrollBar";
    export { GList } from "fairygui-three/ui/GList";
    export { GTree } from "fairygui-three/ui/GTree";
    export { GTreeNode } from "fairygui-three/ui/GTreeNode";
    export { Window } from "fairygui-three/ui/Window";
    export { PopupMenu } from "fairygui-three/ui/PopupMenu";
    export { Controller } from "fairygui-three/ui/Controller";
    export { Transition } from "fairygui-three/ui/Transition";
    export { ScrollPane } from "fairygui-three/ui/ScrollPane";
    export { RelationType } from "fairygui-three/ui/FieldTypes";
    export { UIPackage } from "fairygui-three/ui/UIPackage";
    export { PackageItem } from "fairygui-three/ui/PackageItem";
    export { GObjectPool } from "fairygui-three/ui/GObjectPool";
    export { UIObjectFactory } from "fairygui-three/ui/UIObjectFactory";
    export { UIConfig } from "fairygui-three/ui/UIConfig";
    export { DragDropManager } from "fairygui-three/ui/DragDropManager";
    export { AsyncOperation } from "fairygui-three/ui/AsyncOperation";
    export { TranslationHelper } from "fairygui-three/ui/TranslationHelper";
    export * from "fairygui-three/ui/UIContentScaler";
    export * from "fairygui-three/ui/FieldTypes";
    export { DisplayObject } from "fairygui-three/core/DisplayObject";
    export { Image } from "fairygui-three/core/Image";
    export { MovieClip, Frame } from "fairygui-three/core/MovieClip";
    export { Shape } from "fairygui-three/core/Shape";
    export { Stage } from "fairygui-three/core/Stage";
    export { NTexture } from "fairygui-three/core/NTexture";
    export { NGraphics } from "fairygui-three/core/NGraphics";
    export { NMaterial } from "fairygui-three/core/NMaterial";
    export { TextField } from "fairygui-three/core/text/TextField";
    export { RichTextField } from "fairygui-three/core/text/RichTextField";
    export { InputTextField } from "fairygui-three/core/text/InputTextField";
    export { TextFormat } from "fairygui-three/core/text/TextFormat";
    export { DynamicFont } from "fairygui-three/core/text/DynamicFont";
    export { FontManager } from "fairygui-three/core/text/FontManager";
    export { Event } from "fairygui-three/event/Event";
    export { EventDispatcher } from "fairygui-three/event/EventDispatcher";
    export { GTween } from "fairygui-three/tween/GTween";
    export { GTweener } from "fairygui-three/tween/GTweener";
    export { EaseType } from "fairygui-three/tween/EaseType";
    export { UBBParser } from "fairygui-three/utils/UBBParser";
    export { ByteBuffer } from "fairygui-three/utils/ByteBuffer";
    export { Rect } from "fairygui-three/utils/Rect";
    export { Color4 } from "fairygui-three/utils/Color";
    export { Timers } from "fairygui-three/utils/Timers";
    export * from "fairygui-three/utils/ToolSet";
}

declare module 'fairygui-three/ui/GGroup' {
    import { GObject } from "fairygui-three/ui/GObject";
    import { ByteBuffer } from "fairygui-three/utils/ByteBuffer";
    export class GGroup extends GObject {
            _updating: number;
            constructor();
            dispose(): void;
            /**
                * @see GroupLayout
                */
            get layout(): number;
            /**
                * @see GroupLayout
                */
            set layout(value: number);
            get lineGap(): number;
            set lineGap(value: number);
            get columnGap(): number;
            set columnGap(value: number);
            get excludeInvisibles(): boolean;
            set excludeInvisibles(value: boolean);
            get autoSizeDisabled(): boolean;
            set autoSizeDisabled(value: boolean);
            get mainGridMinSize(): number;
            set mainGridMinSize(value: number);
            get mainGridIndex(): number;
            set mainGridIndex(value: number);
            setBoundsChangedFlag(positionChangedOnly?: boolean): void;
            ensureBoundsCorrect(): void;
            moveChildren(dx: number, dy: number): void;
            resizeChildren(dw: number, dh: number): void;
            protected handleAlphaChanged(): void;
            handleVisibleChanged(): void;
            setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
            setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'fairygui-three/ui/GObject' {
    import { Object3D, Vector2, Blending } from "three";
    import { DisplayObject } from "fairygui-three/core/DisplayObject";
    import { EventType } from "fairygui-three/event/Event";
    import { GearBase } from "fairygui-three/gears/GearBase";
    import { ByteBuffer } from "fairygui-three/utils/ByteBuffer";
    import { Rect } from "fairygui-three/utils/Rect";
    import { Controller } from "fairygui-three/ui/Controller";
    import { GComponent } from "fairygui-three/ui/GComponent";
    import { GGroup } from "fairygui-three/ui/GGroup";
    import { GTreeNode } from "fairygui-three/ui/GTreeNode";
    import { PackageItem } from "fairygui-three/ui/PackageItem";
    import { Relations } from "fairygui-three/ui/Relations";
    export class GObject {
        data?: any;
        packageItem?: PackageItem;
        static draggingObject: GObject;
        protected _displayObject: DisplayObject;
        minWidth: number;
        minHeight: number;
        maxWidth: number;
        maxHeight: number;
        sourceWidth: number;
        sourceHeight: number;
        initWidth: number;
        initHeight: number;
        _parent: GComponent;
        _width: number;
        _height: number;
        _rawWidth: number;
        _rawHeight: number;
        _id: string;
        _name: string;
        _underConstruct: boolean;
        _gearLocked: boolean;
        _sizePercentInGroup: number;
        _treeNode?: GTreeNode;
        constructor();
        get id(): string;
        get name(): string;
        set name(value: string);
        get x(): number;
        set x(value: number);
        get y(): number;
        set y(value: number);
        get z(): number;
        set z(value: number);
        setPosition(xv: number, yv: number, zv?: number): void;
        get xMin(): number;
        set xMin(value: number);
        get yMin(): number;
        set yMin(value: number);
        center(restraint?: boolean): void;
        get width(): number;
        set width(value: number);
        get height(): number;
        set height(value: number);
        setSize(wv: number, hv: number, ignorePivot?: boolean): void;
        protected setSizeDirectly(wv: number, hv: number): void;
        makeFullScreen(): void;
        get actualWidth(): number;
        get actualHeight(): number;
        get scaleX(): number;
        set scaleX(value: number);
        get scaleY(): number;
        set scaleY(value: number);
        setScale(sx: number, sy: number): void;
        get skewX(): number;
        set skewX(value: number);
        get skewY(): number;
        set skewY(value: number);
        setSkew(sx: number, sy: number): void;
        get pivotX(): number;
        set pivotX(value: number);
        get pivotY(): number;
        set pivotY(value: number);
        setPivot(xv: number, yv: number, asAnchor?: boolean): void;
        get pivotAsAnchor(): boolean;
        get touchable(): boolean;
        set touchable(value: boolean);
        get grayed(): boolean;
        set grayed(value: boolean);
        get enabled(): boolean;
        set enabled(value: boolean);
        get rotation(): number;
        set rotation(value: number);
        get rotationX(): number;
        set rotationX(value: number);
        get rotationY(): number;
        set rotationY(value: number);
        get alpha(): number;
        set alpha(value: number);
        get visible(): boolean;
        set visible(value: boolean);
        get internalVisible(): boolean;
        get internalVisible2(): boolean;
        get internalVisible3(): boolean;
        get sortingOrder(): number;
        set sortingOrder(value: number);
        get tooltips(): string;
        set tooltips(value: string);
        get blendMode(): Blending;
        set blendMode(value: Blending);
        get onStage(): boolean;
        get resourceURL(): string;
        set group(value: GGroup);
        get group(): GGroup;
        getGear(index: number): GearBase;
        protected updateGear(index: number): void;
        checkGearController(index: number, c: Controller): boolean;
        updateGearFromRelations(index: number, dx: number, dy: number): void;
        addDisplayLock(): number;
        releaseDisplayLock(token: number): void;
        get relations(): Relations;
        addRelation(target: GObject, relationType: number, usePercent?: boolean): void;
        removeRelation(target: GObject, relationType: number): void;
        get displayObject(): DisplayObject;
        get obj3D(): Object3D;
        get parent(): GComponent;
        set parent(val: GComponent);
        removeFromParent(): void;
        get asCom(): GComponent;
        get text(): string;
        set text(value: string);
        get icon(): string;
        set icon(value: string);
        get treeNode(): GTreeNode;
        get isDisposed(): boolean;
        dispose(): void;
        on(type: EventType, callback: Function, target?: any, capture?: boolean): void;
        on(type: string, callback: Function, target?: any, capture?: boolean): void;
        off(type: EventType, callback: Function, target?: any, capture?: boolean): void;
        off(type: string, callback: Function, target?: any, capture?: boolean): void;
        offAll(type?: EventType): void;
        offAll(type?: string): void;
        hasListener(type: EventType, callback?: Function, target?: any, capture?: boolean): boolean;
        hasListener(type: string, callback?: Function, target?: any, capture?: boolean): boolean;
        dispatchEvent(type: EventType, data?: any): boolean;
        dispatchEvent(type: string, data?: any): boolean;
        onClick(listener: Function, target?: any): void;
        offClick(listener: Function, target?: any): void;
        hasClickListener(): boolean;
        get draggable(): boolean;
        set draggable(value: boolean);
        get dragBounds(): Rect;
        set dragBounds(value: Rect);
        startDrag(touchId?: number): void;
        stopDrag(): void;
        get dragging(): boolean;
        localToGlobal(ax?: number, ay?: number, result?: Vector2): Vector2;
        globalToLocal(ax?: number, ay?: number, result?: Vector2): Vector2;
        localToRoot(ax: number, ay: number, result?: Vector2): Vector2;
        rootToLocal(ax: number, ay: number, result?: Vector2): Vector2;
        localToGlobalRect(ax: number, ay: number, aWidth: number, aHeight: number, result?: Rect): Rect;
        globalToLocalRect(ax: number, ay: number, aWidth: number, aHeight: number, result?: Rect): Rect;
        handleControllerChanged(c: Controller): void;
        protected createDisplayObject(): void;
        protected handlePositionChanged(): void;
        protected handleSizeChanged(): void;
        protected handleScaleChanged(): void;
        protected handleGrayedChanged(): void;
        protected handleAlphaChanged(): void;
        handleVisibleChanged(): void;
        getProp(index: number): any;
        setProp(index: number, value: any): void;
        constructFromResource(): void;
        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
        static cast(obj: any): GObject;
    }
    export interface IGRoot {
        inst: any;
        findFor(obj: GObject): any;
    }
    export var Decls: {
        GRoot?: IGRoot;
    };
    export var gInstanceCounter: number;
    export var constructingDepth: {
        n: number;
    };
}

declare module 'fairygui-three/ui/GGraph' {
    import { GObject } from "fairygui-three/ui/GObject";
    import { ByteBuffer } from "fairygui-three/utils/ByteBuffer";
    import { Shape } from "fairygui-three/core/Shape";
    export class GGraph extends GObject {
        constructor();
        get shape(): Shape;
        get color(): number;
        set color(value: number);
        protected createDisplayObject(): void;
        getProp(index: number): any;
        setProp(index: number, value: any): void;
        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'fairygui-three/ui/GImage' {
    import { GObject } from "fairygui-three/ui/GObject";
    import { ByteBuffer } from "fairygui-three/utils/ByteBuffer";
    export class GImage extends GObject {
        constructor();
        get color(): number;
        set color(value: number);
        get flip(): number;
        set flip(value: number);
        get fillMethod(): number;
        set fillMethod(value: number);
        get fillOrigin(): number;
        set fillOrigin(value: number);
        get fillClockwise(): boolean;
        set fillClockwise(value: boolean);
        get fillAmount(): number;
        set fillAmount(value: number);
        protected createDisplayObject(): void;
        protected handleSizeChanged(): void;
        constructFromResource(): void;
        getProp(index: number): any;
        setProp(index: number, value: any): void;
        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'fairygui-three/ui/GMovieClip' {
    import { GObject } from "fairygui-three/ui/GObject";
    import { ByteBuffer } from "fairygui-three/utils/ByteBuffer";
    export class GMovieClip extends GObject {
        constructor();
        get color(): number;
        set color(value: number);
        protected createDisplayObject(): void;
        get playing(): boolean;
        set playing(value: boolean);
        get frame(): number;
        set frame(value: number);
        get timeScale(): number;
        set timeScale(value: number);
        rewind(): void;
        syncStatus(anotherMc: GMovieClip): void;
        advance(timeInMiniseconds: number): void;
        setPlaySettings(start?: number, end?: number, times?: number, endAt?: number): void;
        getProp(index: number): any;
        setProp(index: number, value: any): void;
        constructFromResource(): void;
        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'fairygui-three/ui/GRoot' {
    import { PopupDirection } from "fairygui-three/ui/FieldTypes";
    import { GComponent } from "fairygui-three/ui/GComponent";
    import { GObject } from "fairygui-three/ui/GObject";
    import { Window } from "fairygui-three/ui/Window";
    export class GRoot extends GComponent {
        static get inst(): GRoot;
        static findFor(obj: GObject): GRoot;
        constructor();
        showWindow(win: Window): void;
        hideWindow(win: Window): void;
        hideWindowImmediately(win: Window): void;
        bringToFront(win: Window): void;
        showModalWait(msg?: string): void;
        closeModalWait(): void;
        closeAllExceptModals(): void;
        closeAllWindows(): void;
        getTopWindow(): Window;
        get modalLayer(): GObject;
        get hasModalWindow(): boolean;
        get modalWaiting(): boolean;
        showPopup(popup: GObject, target?: GObject, dir?: PopupDirection): void;
        togglePopup(popup: GObject, target?: GObject, dir?: PopupDirection): void;
        hidePopup(popup?: GObject): void;
        get hasAnyPopup(): boolean;
        showTooltips(msg: string): void;
        showTooltipsWin(tooltipWin: GObject, xx?: number, yy?: number): void;
        hideTooltips(): void;
        playOneShotSound(url: string, volumeScale?: number): void;
        checkPopups(): void;
    }
}

declare module 'fairygui-three/ui/GTextField' {
    import { InputTextField } from "fairygui-three/core/text/InputTextField";
    import { TextField } from "fairygui-three/core/text/TextField";
    import { TextFormat } from "fairygui-three/core/text/TextFormat";
    import { AlignType, VertAlignType } from "fairygui-three/ui/FieldTypes";
    import { GObject } from "fairygui-three/ui/GObject";
    import { ByteBuffer } from "fairygui-three/utils/ByteBuffer";
    import { RichTextField } from "fairygui-three/core/text/RichTextField";
    export type TextTemplate = Record<string, string>;
    export class GTextField extends GObject {
        protected _textField: TextField | RichTextField | InputTextField;
        protected _text: string;
        protected _ubbEnabled: boolean;
        protected _updatingSize: boolean;
        protected _template: TextTemplate;
        constructor();
        protected createDisplayObject(): void;
        get text(): string;
        set text(value: string);
        protected setText(): void;
        get textTemplate(): TextTemplate;
        set textTemplate(value: TextTemplate);
        setVar(name: string, value: string): GTextField;
        flushVars(): void;
        get textFormat(): TextFormat;
        applyFormat(): void;
        get align(): AlignType;
        set align(value: AlignType);
        get verticalAlign(): VertAlignType;
        set verticalAlign(value: VertAlignType);
        get singleLine(): boolean;
        set singleLine(value: boolean);
        set ubbEnabled(value: boolean);
        get ubbEnabled(): boolean;
        get autoSize(): number;
        set autoSize(value: number);
        get textWidth(): number;
        get textHeight(): number;
        get color(): number;
        set color(value: number);
        getProp(index: number): any;
        setProp(index: number, value: any): void;
        protected handleSizeChanged(): void;
        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
        protected parseTemplate(template: string): string;
    }
}

declare module 'fairygui-three/ui/GRichTextField' {
    import { GTextField } from "fairygui-three/ui/GTextField";
    export class GRichTextField extends GTextField {
        constructor();
        protected createDisplayObject(): void;
        protected setText(): void;
    }
}

declare module 'fairygui-three/ui/GTextInput' {
    import { GTextField } from "fairygui-three/ui/GTextField";
    import { ByteBuffer } from "fairygui-three/utils/ByteBuffer";
    export class GTextInput extends GTextField {
        constructor();
        protected createDisplayObject(): void;
        get password(): boolean;
        set password(value: boolean);
        get keyboardType(): string;
        set keyboardType(value: string);
        set editable(value: boolean);
        get editable(): boolean;
        set maxLength(value: number);
        get maxLength(): number;
        set promptText(value: string);
        get promptText(): string;
        set restrict(value: string);
        get restrict(): string;
        requestFocus(): void;
        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'fairygui-three/ui/GLoader' {
    import { MovieClip } from "fairygui-three/core/MovieClip";
    import { NTexture } from "fairygui-three/core/NTexture";
    import { ByteBuffer } from "fairygui-three/utils/ByteBuffer";
    import { AlignType, VertAlignType } from "fairygui-three/ui/FieldTypes";
    import { GComponent } from "fairygui-three/ui/GComponent";
    import { GObject } from "fairygui-three/ui/GObject";
    export class GLoader extends GObject {
        constructor();
        protected createDisplayObject(): void;
        dispose(): void;
        get url(): string;
        set url(value: string);
        get icon(): string;
        set icon(value: string);
        get align(): AlignType;
        set align(value: AlignType);
        get verticalAlign(): VertAlignType;
        set verticalAlign(value: VertAlignType);
        get fill(): number;
        set fill(value: number);
        get shrinkOnly(): boolean;
        set shrinkOnly(value: boolean);
        get autoSize(): boolean;
        set autoSize(value: boolean);
        get playing(): boolean;
        set playing(value: boolean);
        get frame(): number;
        set frame(value: number);
        get color(): number;
        set color(value: number);
        get fillMethod(): number;
        set fillMethod(value: number);
        get fillOrigin(): number;
        set fillOrigin(value: number);
        get fillClockwise(): boolean;
        set fillClockwise(value: boolean);
        get fillAmount(): number;
        set fillAmount(value: number);
        get content(): MovieClip;
        get component(): GComponent;
        protected loadContent(): void;
        protected loadFromPackage(itemURL: string): void;
        protected loadExternal(): void;
        protected freeExternal(texture: NTexture): void;
        protected onExternalLoadSuccess(texture: NTexture): void;
        protected onExternalLoadFailed(): void;
        protected handleSizeChanged(): void;
        getProp(index: number): any;
        setProp(index: number, value: any): void;
        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'fairygui-three/ui/GLoader3D' {
    import { GObject } from "fairygui-three/ui/GObject";
    export class GLoader3D extends GObject {
    }
}

declare module 'fairygui-three/ui/GComponent' {
    import { Vector2 } from "three";
    import { DisplayObject } from "fairygui-three/core/DisplayObject";
    import { ByteBuffer } from "fairygui-three/utils/ByteBuffer";
    import { Controller } from "fairygui-three/ui/Controller";
    import { GGroup } from "fairygui-three/ui/GGroup";
    import { GObject } from "fairygui-three/ui/GObject";
    import { Margin } from "fairygui-three/ui/Margin";
    import { ScrollPane } from "fairygui-three/ui/ScrollPane";
    import { Transition } from "fairygui-three/ui/Transition";
    export class GComponent extends GObject {
        protected _margin: Margin;
        protected _trackBounds: boolean;
        protected _boundsChanged: boolean;
        protected _childrenRenderOrder: number;
        protected _apexIndex: number;
        _buildingDisplayList: boolean;
        _children: GObject[];
        _controllers: Controller[];
        _transitions: Transition[];
        _container: DisplayObject;
        _scrollPane: ScrollPane;
        _alignOffset: Vector2;
        constructor();
        protected createDisplayObject(): void;
        dispose(): void;
        get displayListContainer(): DisplayObject;
        addChild(child: GObject): GObject;
        addChildAt(child: GObject, index: number): GObject;
        removeChild(child: GObject, dispose?: boolean): GObject;
        removeChildAt(index: number, dispose?: boolean): GObject;
        removeChildren(beginIndex?: number, endIndex?: number, dispose?: boolean): void;
        getChildAt(index: number): GObject;
        getChild(name: string): GObject;
        getChildByPath(path: string): GObject;
        getVisibleChild(name: string): GObject;
        getChildInGroup(name: string, group: GGroup): GObject;
        getChildById(id: string): GObject;
        getChildIndex(child: GObject): number;
        setChildIndex(child: GObject, index: number): void;
        setChildIndexBefore(child: GObject, index: number): number;
        swapChildren(child1: GObject, child2: GObject): void;
        swapChildrenAt(index1: number, index2: number): void;
        get numChildren(): number;
        isAncestorOf(child: GObject): boolean;
        addController(controller: Controller): void;
        getControllerAt(index: number): Controller;
        getController(name: string): Controller;
        removeController(c: Controller): void;
        get controllers(): Controller[];
        childStateChanged(child: GObject): void;
        applyController(c: Controller): void;
        applyAllControllers(): void;
        adjustRadioGroupDepth(obj: GObject, c: Controller): void;
        getTransitionAt(index: number): Transition;
        getTransition(transName: string): Transition;
        isChildInView(child: GObject): boolean;
        getFirstChildInView(): number;
        get scrollPane(): ScrollPane;
        get opaque(): boolean;
        set opaque(value: boolean);
        get margin(): Margin;
        set margin(value: Margin);
        get childrenRenderOrder(): number;
        set childrenRenderOrder(value: number);
        get apexIndex(): number;
        set apexIndex(value: number);
        get baseUserData(): string;
        protected updateMask(): void;
        protected setupScroll(buffer: ByteBuffer): void;
        protected setupOverflow(overflow: number): void;
        protected handleSizeChanged(): void;
        protected handleGrayedChanged(): void;
        handleControllerChanged(c: Controller): void;
        setBoundsChangedFlag(): void;
        ensureBoundsCorrect(): void;
        protected updateBounds(): void;
        setBounds(ax: number, ay: number, aw: number, ah: number): void;
        get viewWidth(): number;
        set viewWidth(value: number);
        get viewHeight(): number;
        set viewHeight(value: number);
        getSnappingPosition(xValue: number, yValue: number, resultPoint?: Vector2): Vector2;
        protected shouldSnapToNext(dir: number, delta: number, size: number): boolean;
        /**
          * dir正数表示右移或者下移，负数表示左移或者上移
          */
        getSnappingPositionWithDir(xValue: number, yValue: number, xDir: number, yDir: number, resultPoint?: Vector2): Vector2;
        childSortingOrderChanged(child: GObject, oldValue: number, newValue: number): void;
        constructFromResource(): void;
        constructFromResource2(objectPool: GObject[], poolIndex: number): void;
        protected constructExtension(buffer: ByteBuffer): void;
        protected onConstruct(): void;
        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'fairygui-three/ui/GLabel' {
    import { GComponent } from "fairygui-three/ui/GComponent";
    import { GObject } from "fairygui-three/ui/GObject";
    import { GTextField } from "fairygui-three/ui/GTextField";
    import { ByteBuffer } from "fairygui-three/utils/ByteBuffer";
    export class GLabel extends GComponent {
        protected _titleObject: GObject;
        protected _iconObject: GObject;
        constructor();
        get icon(): string;
        set icon(value: string);
        get title(): string;
        set title(value: string);
        get text(): string;
        set text(value: string);
        get titleColor(): number;
        set titleColor(value: number);
        get titleFontSize(): number;
        set titleFontSize(value: number);
        get color(): number;
        set color(value: number);
        set editable(val: boolean);
        get editable(): boolean;
        getTextField(): GTextField;
        getProp(index: number): any;
        setProp(index: number, value: any): void;
        protected constructExtension(buffer: ByteBuffer): void;
        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'fairygui-three/ui/GButton' {
    import { Controller } from "fairygui-three/ui/Controller";
    import { GComponent } from "fairygui-three/ui/GComponent";
    import { GObject } from "fairygui-three/ui/GObject";
    import { GTextField } from "fairygui-three/ui/GTextField";
    import { ByteBuffer } from "fairygui-three/utils/ByteBuffer";
    export type ButtonStatus = "up" | "down" | "over" | "selectedOver" | "disabled" | "selectedDisabled";
    export class GButton extends GComponent {
        protected _titleObject: GObject;
        protected _iconObject: GObject;
        constructor();
        get icon(): string;
        set icon(value: string);
        get selectedIcon(): string;
        set selectedIcon(value: string);
        get title(): string;
        set title(value: string);
        get text(): string;
        set text(value: string);
        get selectedTitle(): string;
        set selectedTitle(value: string);
        get titleColor(): number;
        set titleColor(value: number);
        get titleFontSize(): number;
        set titleFontSize(value: number);
        get sound(): string;
        set sound(val: string);
        get soundVolumeScale(): number;
        set soundVolumeScale(value: number);
        set selected(val: boolean);
        get selected(): boolean;
        get mode(): number;
        set mode(value: number);
        get relatedController(): Controller;
        set relatedController(val: Controller);
        get relatedPageId(): string;
        set relatedPageId(val: string);
        get changeStateOnClick(): boolean;
        set changeStateOnClick(value: boolean);
        get linkedPopup(): GObject;
        set linkedPopup(value: GObject);
        getTextField(): GTextField;
        fireClick(downEffect?: boolean, clickCall?: boolean): void;
        protected setState(val: ButtonStatus): void;
        protected setCurrentState(): void;
        handleControllerChanged(c: Controller): void;
        protected handleGrayedChanged(): void;
        getProp(index: number): any;
        setProp(index: number, value: any): void;
        protected constructExtension(buffer: ByteBuffer): void;
        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'fairygui-three/ui/GComboBox' {
    import { Controller } from "fairygui-three/ui/Controller";
    import { PopupDirection } from "fairygui-three/ui/FieldTypes";
    import { GComponent } from "fairygui-three/ui/GComponent";
    import { GList } from "fairygui-three/ui/GList";
    import { GObject } from "fairygui-three/ui/GObject";
    import { GTextField } from "fairygui-three/ui/GTextField";
    import { ByteBuffer } from "fairygui-three/utils/ByteBuffer";
    export class GComboBox extends GComponent {
        dropdown: GComponent;
        popupDirection: PopupDirection;
        visibleItemCount: number;
        protected _titleObject: GObject;
        protected _iconObject: GObject;
        protected _list: GList;
        protected _items: string[];
        protected _icons?: string[];
        protected _values: string[];
        constructor();
        get text(): string;
        set text(value: string);
        get titleColor(): number;
        set titleColor(value: number);
        get titleFontSize(): number;
        set titleFontSize(value: number);
        get icon(): string;
        set icon(value: string);
        get items(): string[];
        set items(value: string[]);
        get icons(): string[];
        set icons(value: string[]);
        get values(): string[];
        set values(value: string[]);
        get selectedIndex(): number;
        set selectedIndex(val: number);
        get value(): string;
        set value(val: string);
        getTextField(): GTextField;
        protected setState(val: string): void;
        protected setCurrentState(): void;
        get selectionController(): Controller;
        set selectionController(value: Controller);
        handleControllerChanged(c: Controller): void;
        dispose(): void;
        getProp(index: number): any;
        setProp(index: number, value: any): void;
        protected constructExtension(buffer: ByteBuffer): void;
        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
        protected showDropdown(): void;
    }
}

declare module 'fairygui-three/ui/GSlider' {
    import { ByteBuffer } from "fairygui-three/utils/ByteBuffer";
    import { GComponent } from "fairygui-three/ui/GComponent";
    export class GSlider extends GComponent {
        changeOnClick: boolean;
        canDrag: boolean;
        constructor();
        get titleType(): number;
        set titleType(value: number);
        get wholeNumbers(): boolean;
        set wholeNumbers(value: boolean);
        get min(): number;
        set min(value: number);
        get max(): number;
        set max(value: number);
        get value(): number;
        set value(value: number);
        update(): void;
        protected constructExtension(buffer: ByteBuffer): void;
        protected handleSizeChanged(): void;
        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'fairygui-three/ui/GProgressBar' {
    import { GComponent } from "fairygui-three/ui/GComponent";
    import { GTweener } from "fairygui-three/tween/GTweener";
    import { ByteBuffer } from "fairygui-three/utils/ByteBuffer";
    export class GProgressBar extends GComponent {
        constructor();
        get titleType(): number;
        set titleType(value: number);
        get min(): number;
        set min(value: number);
        get max(): number;
        set max(value: number);
        get value(): number;
        set value(value: number);
        tweenValue(value: number, duration: number): GTweener;
        update(newValue: number): void;
        protected constructExtension(buffer: ByteBuffer): void;
        protected handleSizeChanged(): void;
        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'fairygui-three/ui/GScrollBar' {
    import { GComponent } from "fairygui-three/ui/GComponent";
    import { ScrollPane } from "fairygui-three/ui/ScrollPane";
    import { ByteBuffer } from "fairygui-three/utils/ByteBuffer";
    export class GScrollBar extends GComponent {
        constructor();
        setScrollPane(target: ScrollPane, vertical: boolean): void;
        setDisplayPerc(value: number): void;
        setScrollPerc(val: number): void;
        get minSize(): number;
        get gripDragging(): boolean;
        protected constructExtension(buffer: ByteBuffer): void;
    }
}

declare module 'fairygui-three/ui/GList' {
    import { Vector2 } from "three";
    import { Event } from "fairygui-three/event/Event";
    import { ByteBuffer } from "fairygui-three/utils/ByteBuffer";
    import { Controller } from "fairygui-three/ui/Controller";
    import { AlignType, VertAlignType } from "fairygui-three/ui/FieldTypes";
    import { GComponent } from "fairygui-three/ui/GComponent";
    import { GObject } from "fairygui-three/ui/GObject";
    import { GObjectPool } from "fairygui-three/ui/GObjectPool";
    export class GList extends GComponent {
        itemRenderer: (index: number, item: any) => void;
        itemProvider: (index: number) => string;
        scrollItemToViewOnClick: boolean;
        foldInvisibleItems: boolean;
        constructor();
        dispose(): void;
        get layout(): number;
        set layout(value: number);
        get lineCount(): number;
        set lineCount(value: number);
        get columnCount(): number;
        set columnCount(value: number);
        get lineGap(): number;
        set lineGap(value: number);
        get columnGap(): number;
        set columnGap(value: number);
        get align(): AlignType;
        set align(value: AlignType);
        get verticalAlign(): VertAlignType;
        set verticalAlign(value: VertAlignType);
        get virtualItemSize(): Vector2;
        set virtualItemSize(value: Vector2);
        get defaultItem(): string;
        set defaultItem(val: string);
        get autoResizeItem(): boolean;
        set autoResizeItem(value: boolean);
        get selectionMode(): number;
        set selectionMode(value: number);
        get selectionController(): Controller;
        set selectionController(value: Controller);
        get itemPool(): GObjectPool;
        getFromPool(url?: string): GObject;
        returnToPool(obj: GObject): void;
        addChildAt(child: GObject, index: number): GObject;
        addItem(url?: string): GObject;
        addItemFromPool(url?: string): GObject;
        removeChildAt(index: number, dispose?: boolean): GObject;
        removeChildToPoolAt(index: number): void;
        removeChildToPool(child: GObject): void;
        removeChildrenToPool(beginIndex?: number, endIndex?: number): void;
        get selectedIndex(): number;
        set selectedIndex(value: number);
        getSelection(result?: number[]): number[];
        addSelection(index: number, scrollItToView?: boolean): void;
        removeSelection(index: number): void;
        clearSelection(): void;
        selectAll(): void;
        selectNone(): void;
        selectReverse(): void;
        handleArrowKey(dir: number): void;
        protected dispatchItemEvent(item: GObject, evt: Event): void;
        resizeToFit(itemCount?: number, minSize?: number): void;
        getMaxItemWidth(): number;
        protected handleSizeChanged(): void;
        handleControllerChanged(c: Controller): void;
        getSnappingPositionWithDir(xValue: number, yValue: number, xDir: number, yDir: number, resultPoint?: Vector2): Vector2;
        scrollToView(index: number, ani?: boolean, setFirst?: boolean): void;
        getFirstChildInView(): number;
        childIndexToItemIndex(index: number): number;
        itemIndexToChildIndex(index: number): number;
        setVirtual(): void;
        /**
          * Set the list to be virtual list, and has loop behavior.
          */
        setVirtualAndLoop(): void;
        get numItems(): number;
        set numItems(value: number);
        refreshVirtualList(): void;
        protected updateBounds(): void;
        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
        protected readItems(buffer: ByteBuffer): void;
        protected setupItem(buffer: ByteBuffer, obj: GObject): void;
        setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
    }
}

declare module 'fairygui-three/ui/GTree' {
    import { Event } from "fairygui-three/event/Event";
    import { ByteBuffer } from "fairygui-three/utils/ByteBuffer";
    import { GComponent } from "fairygui-three/ui/GComponent";
    import { GList } from "fairygui-three/ui/GList";
    import { GObject } from "fairygui-three/ui/GObject";
    import { GTreeNode } from "fairygui-three/ui/GTreeNode";
    export class GTree extends GList {
        treeNodeRender: (node: GTreeNode, obj: GComponent) => void;
        treeNodeWillExpand: (node: GTreeNode, expanded: boolean) => void;
        constructor();
        get rootNode(): GTreeNode;
        get indent(): number;
        set indent(value: number);
        get clickToExpand(): number;
        set clickToExpand(value: number);
        getSelectedNode(): GTreeNode;
        getSelectedNodes(result?: Array<GTreeNode>): Array<GTreeNode>;
        selectNode(node: GTreeNode, scrollItToView?: boolean): void;
        unselectNode(node: GTreeNode): void;
        expandAll(folderNode?: GTreeNode): void;
        collapseAll(folderNode?: GTreeNode): void;
        _afterInserted(node: GTreeNode): void;
        _afterRemoved(node: GTreeNode): void;
        _afterExpanded(node: GTreeNode): void;
        _afterCollapsed(node: GTreeNode): void;
        _afterMoved(node: GTreeNode): void;
        protected dispatchItemEvent(item: GObject, evt: Event): void;
        setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
        protected readItems(buffer: ByteBuffer): void;
    }
}

declare module 'fairygui-three/ui/GTreeNode' {
    import { GComponent } from "fairygui-three/ui/GComponent";
    import { GTree } from "fairygui-three/ui/GTree";
    export class GTreeNode {
        data?: any;
        _cell: GComponent;
        _resURL: string;
        constructor(hasChild: boolean, resURL?: string);
        set expanded(value: boolean);
        get expanded(): boolean;
        get isFolder(): boolean;
        get parent(): GTreeNode;
        get text(): string;
        set text(value: string);
        get icon(): string;
        set icon(value: string);
        get cell(): GComponent;
        get level(): number;
        _setLevel(value: number): void;
        addChild(child: GTreeNode): GTreeNode;
        addChildAt(child: GTreeNode, index: number): GTreeNode;
        removeChild(child: GTreeNode): GTreeNode;
        removeChildAt(index: number): GTreeNode;
        removeChildren(beginIndex?: number, endIndex?: number): void;
        getChildAt(index: number): GTreeNode;
        getChildIndex(child: GTreeNode): number;
        getPrevSibling(): GTreeNode;
        getNextSibling(): GTreeNode;
        setChildIndex(child: GTreeNode, index: number): void;
        swapChildren(child1: GTreeNode, child2: GTreeNode): void;
        swapChildrenAt(index1: number, index2: number): void;
        get numChildren(): number;
        expandToRoot(): void;
        get tree(): GTree;
        _setTree(value: GTree): void;
    }
}

declare module 'fairygui-three/ui/Window' {
    import { GComponent } from "fairygui-three/ui/GComponent";
    import { GObject } from "fairygui-three/ui/GObject";
    import { GRoot } from "fairygui-three/ui/GRoot";
    export interface IUISource {
        fileName: string;
        loaded: boolean;
        load(callback: Function, target: any): void;
    }
    export class Window extends GComponent {
        bringToFontOnClick: boolean;
        protected _requestingCmd: number;
        constructor();
        addUISource(source: IUISource): void;
        set contentPane(val: GComponent);
        get contentPane(): GComponent;
        get frame(): GComponent;
        get closeButton(): GObject;
        set closeButton(value: GObject);
        get dragArea(): GObject;
        set dragArea(value: GObject);
        get contentArea(): GObject;
        set contentArea(value: GObject);
        show(): void;
        showOn(root: GRoot): void;
        hide(): void;
        hideImmediately(): void;
        centerOn(r: GRoot, restraint?: boolean): void;
        toggleStatus(): void;
        get isShowing(): boolean;
        get isTop(): boolean;
        get modal(): boolean;
        set modal(val: boolean);
        bringToFront(): void;
        showModalWait(requestingCmd?: number): void;
        protected layoutModalWaitPane(): void;
        closeModalWait(requestingCmd?: number): boolean;
        get modalWaiting(): boolean;
        init(): void;
        protected onInit(): void;
        protected onShown(): void;
        protected onHide(): void;
        protected doShowAnimation(): void;
        protected doHideAnimation(): void;
        dispose(): void;
        protected closeEventHandler(): void;
    }
}

declare module 'fairygui-three/ui/PopupMenu' {
    import { PopupDirection } from "fairygui-three/ui/FieldTypes";
    import { GButton } from "fairygui-three/ui/GButton";
    import { GComponent } from "fairygui-three/ui/GComponent";
    import { GList } from "fairygui-three/ui/GList";
    import { GObject } from "fairygui-three/ui/GObject";
    export class PopupMenu {
        protected _contentPane: GComponent;
        protected _list: GList;
        constructor(resourceURL?: string);
        dispose(): void;
        addItem(caption: string, handler?: Function): GButton;
        addItemAt(caption: string, index: number, handler?: Function): GButton;
        addSeperator(): void;
        getItemName(index: number): string;
        setItemText(name: string, caption: string): void;
        setItemVisible(name: string, visible: boolean): void;
        setItemGrayed(name: string, grayed: boolean): void;
        setItemCheckable(name: string, checkable: boolean): void;
        setItemChecked(name: string, checked: boolean): void;
        isItemChecked(name: string): boolean;
        removeItem(name: string): boolean;
        clearItems(): void;
        get itemCount(): number;
        get contentPane(): GComponent;
        get list(): GList;
        show(target?: GObject, dir?: PopupDirection): void;
    }
}

declare module 'fairygui-three/ui/Controller' {
    import { EventDispatcher } from "fairygui-three/event/EventDispatcher";
    import { GComponent } from "fairygui-three/ui/GComponent";
    import { ByteBuffer } from "fairygui-three/utils/ByteBuffer";
    export class Controller extends EventDispatcher {
        name: string;
        parent: GComponent;
        autoRadioGroupDepth?: boolean;
        changing: boolean;
        constructor();
        dispose(): void;
        get selectedIndex(): number;
        set selectedIndex(value: number);
        setSelectedIndex(value: number): void;
        get previsousIndex(): number;
        get selectedPage(): string;
        set selectedPage(val: string);
        setSelectedPage(value: string): void;
        get previousPage(): string;
        get pageCount(): number;
        getPageName(index: number): string;
        addPage(name?: string): void;
        addPageAt(name?: string, index?: number): void;
        removePage(name: string): void;
        removePageAt(index: number): void;
        clearPages(): void;
        hasPage(aName: string): boolean;
        getPageIndexById(aId: string): number;
        getPageIdByName(aName: string): string;
        getPageNameById(aId: string): string;
        getPageId(index: number): string;
        get selectedPageId(): string;
        set selectedPageId(val: string);
        set oppositePageId(val: string);
        get previousPageId(): string;
        runActions(): void;
        setup(buffer: ByteBuffer): void;
    }
}

declare module 'fairygui-three/ui/Transition' {
    import { GComponent } from "fairygui-three/ui/GComponent";
    import { GObject } from "fairygui-three/ui/GObject";
    import { ByteBuffer } from "fairygui-three/utils/ByteBuffer";
    export class Transition {
        name: string;
        constructor(owner: GComponent);
        play(onComplete?: Function, times?: number, delay?: number, startTime?: number, endTime?: number): void;
        playReverse(onComplete?: Function, times?: number, delay?: number, startTime?: number, endTime?: number): void;
        changePlayTimes(value: number): void;
        setAutoPlay(value: boolean, times?: number, delay?: number): void;
        stop(setToComplete?: boolean, processCallback?: boolean): void;
        setPaused(paused: boolean): void;
        dispose(): void;
        get playing(): boolean;
        setValue(label: string, ...args: any[]): void;
        setHook(label: string, callback: Function): void;
        clearHooks(): void;
        setTarget(label: string, newTarget: GObject): void;
        setDuration(label: string, value: number): void;
        getLabelTime(label: string): number;
        get timeScale(): number;
        set timeScale(value: number);
        updateFromRelations(targetId: string, dx: number, dy: number): void;
        onOwnerAddedToStage(): void;
        onOwnerRemovedFromStage(): void;
        setup(buffer: ByteBuffer): void;
    }
}

declare module 'fairygui-three/ui/ScrollPane' {
    import { ByteBuffer } from "fairygui-three/utils/ByteBuffer";
    import { Rect } from "fairygui-three/utils/Rect";
    import { Controller } from "fairygui-three/ui/Controller";
    import { GComponent } from "fairygui-three/ui/GComponent";
    import { GObject } from "fairygui-three/ui/GObject";
    import { GScrollBar } from "fairygui-three/ui/GScrollBar";
    export class ScrollPane {
        static draggingPane: ScrollPane;
        _displayInDemand?: boolean;
        _loop: number;
        constructor(owner: GComponent);
        setup(buffer: ByteBuffer): void;
        dispose(): void;
        get owner(): GComponent;
        get hzScrollBar(): GScrollBar;
        get vtScrollBar(): GScrollBar;
        get header(): GComponent;
        get footer(): GComponent;
        get bouncebackEffect(): boolean;
        set bouncebackEffect(sc: boolean);
        get touchEffect(): boolean;
        set touchEffect(sc: boolean);
        set scrollStep(val: number);
        get scrollStep(): number;
        get snapToItem(): boolean;
        set snapToItem(value: boolean);
        get mouseWheelEnabled(): boolean;
        set mouseWheelEnabled(value: boolean);
        get decelerationRate(): number;
        set decelerationRate(value: number);
        get isDragged(): boolean;
        get percX(): number;
        set percX(value: number);
        setPercX(value: number, ani?: boolean): void;
        get percY(): number;
        set percY(value: number);
        setPercY(value: number, ani?: boolean): void;
        get posX(): number;
        set posX(value: number);
        setPosX(value: number, ani?: boolean): void;
        get posY(): number;
        set posY(value: number);
        setPosY(value: number, ani?: boolean): void;
        get contentWidth(): number;
        get contentHeight(): number;
        get viewWidth(): number;
        set viewWidth(value: number);
        get viewHeight(): number;
        set viewHeight(value: number);
        get currentPageX(): number;
        set currentPageX(value: number);
        get currentPageY(): number;
        set currentPageY(value: number);
        setCurrentPageX(value: number, ani?: boolean): void;
        setCurrentPageY(value: number, ani?: boolean): void;
        get isBottomMost(): boolean;
        get isRightMost(): boolean;
        get pageController(): Controller;
        set pageController(value: Controller);
        get scrollingPosX(): number;
        get scrollingPosY(): number;
        scrollTop(ani?: boolean): void;
        scrollBottom(ani?: boolean): void;
        scrollUp(ratio?: number, ani?: boolean): void;
        scrollDown(ratio?: number, ani?: boolean): void;
        scrollLeft(ratio?: number, ani?: boolean): void;
        scrollRight(ratio?: number, ani?: boolean): void;
        scrollToView(target: GObject | Rect, ani?: boolean, setFirst?: boolean): void;
        isChildInView(obj: GObject): boolean;
        cancelDragging(): void;
        lockHeader(size: number): void;
        lockFooter(size: number): void;
        onOwnerSizeChanged(): void;
        handleControllerChanged(c: Controller): void;
        adjustMaskContainer(): void;
        setSize(aWidth: number, aHeight: number): void;
        setContentSize(aWidth: number, aHeight: number): void;
        changeContentSizeOnScrolling(deltaWidth: number, deltaHeight: number, deltaPosX: number, deltaPosY: number): void;
        updateScrollBarVisible(): void;
    }
}

declare module 'fairygui-three/ui/FieldTypes' {
    export type AlignType = "left" | "center" | "right";
    export type VertAlignType = "top" | "middle" | "bottom";
    export enum ButtonMode {
        Common = 0,
        Check = 1,
        Radio = 2
    }
    export enum AutoSizeType {
        None = 0,
        Both = 1,
        Height = 2,
        Shrink = 3
    }
    export enum LoaderFillType {
        None = 0,
        Scale = 1,
        ScaleMatchHeight = 2,
        ScaleMatchWidth = 3,
        ScaleFree = 4,
        ScaleNoBorder = 5
    }
    export enum ListLayoutType {
        SingleColumn = 0,
        SingleRow = 1,
        FlowHorizontal = 2,
        FlowVertical = 3,
        Pagination = 4
    }
    export enum ListSelectionMode {
        Single = 0,
        Multiple = 1,
        Multiple_SingleClick = 2,
        None = 3
    }
    export enum OverflowType {
        Visible = 0,
        Hidden = 1,
        Scroll = 2
    }
    export enum PackageItemType {
        Image = 0,
        MovieClip = 1,
        Sound = 2,
        Component = 3,
        Atlas = 4,
        Font = 5,
        Swf = 6,
        Misc = 7,
        Unknown = 8
    }
    export enum ObjectType {
        Image = 0,
        MovieClip = 1,
        Swf = 2,
        Graph = 3,
        Loader = 4,
        Group = 5,
        Text = 6,
        RichText = 7,
        InputText = 8,
        Component = 9,
        List = 10,
        Label = 11,
        Button = 12,
        ComboBox = 13,
        ProgressBar = 14,
        Slider = 15,
        ScrollBar = 16,
        Tree = 17,
        Loader3D = 18
    }
    export enum ProgressTitleType {
        Percent = 0,
        ValueAndMax = 1,
        Value = 2,
        Max = 3
    }
    export enum ScrollBarDisplayType {
        Default = 0,
        Visible = 1,
        Auto = 2,
        Hidden = 3
    }
    export enum ScrollType {
        Horizontal = 0,
        Vertical = 1,
        Both = 2
    }
    export enum FlipType {
        None = 0,
        Horizontal = 1,
        Vertical = 2,
        Both = 3
    }
    export enum ChildrenRenderOrder {
        Ascent = 0,
        Descent = 1,
        Arch = 2
    }
    export enum GroupLayoutType {
        None = 0,
        Horizontal = 1,
        Vertical = 2
    }
    export enum PopupDirection {
        Auto = 0,
        Up = 1,
        Down = 2
    }
    export enum RelationType {
        Left_Left = 0,
        Left_Center = 1,
        Left_Right = 2,
        Center_Center = 3,
        Right_Left = 4,
        Right_Center = 5,
        Right_Right = 6,
        Top_Top = 7,
        Top_Middle = 8,
        Top_Bottom = 9,
        Middle_Middle = 10,
        Bottom_Top = 11,
        Bottom_Middle = 12,
        Bottom_Bottom = 13,
        Width = 14,
        Height = 15,
        LeftExt_Left = 16,
        LeftExt_Right = 17,
        RightExt_Left = 18,
        RightExt_Right = 19,
        TopExt_Top = 20,
        TopExt_Bottom = 21,
        BottomExt_Top = 22,
        BottomExt_Bottom = 23,
        Size = 24
    }
    export enum FillMethod {
        None = 0,
        Horizontal = 1,
        Vertical = 2,
        Radial90 = 3,
        Radial180 = 4,
        Radial360 = 5
    }
    export enum FillOrigin {
        Top = 0,
        Bottom = 1,
        Left = 2,
        Right = 3,
        TopLeft = 0,
        TopRight = 1,
        BottomLeft = 2,
        BottomRight = 3
    }
    export enum FillOrigin90 {
        TopLeft = 0,
        TopRight = 1,
        BottomLeft = 2,
        BottomRight = 3
    }
    export enum ObjectPropID {
        Text = 0,
        Icon = 1,
        Color = 2,
        OutlineColor = 3,
        Playing = 4,
        Frame = 5,
        DeltaTime = 6,
        TimeScale = 7,
        FontSize = 8,
        Selected = 9
    }
}

declare module 'fairygui-three/ui/UIPackage' {
    import { GObject } from "fairygui-three/ui/GObject";
    import { PackageItem } from "fairygui-three/ui/PackageItem";
    export class UIPackage {
        _branchIndex: number;
        constructor();
        static get branch(): string;
        static set branch(value: string);
        static getVar(key: string): string;
        static setVar(key: string, value: string): void;
        static getById(id: string): UIPackage;
        static getByName(name: string): UIPackage;
        static loadPackage(resKey: string, onProgress?: (event: ProgressEvent) => void): Promise<UIPackage>;
        static removePackage(packageIdOrName: string): void;
        static createObject(pkgName: string, resName: string, userClass?: new () => GObject): GObject;
        static createObjectFromURL(url: string, userClass?: new () => GObject): GObject;
        static getItemURL(pkgName: string, resName: string): string;
        static getItemByURL(url: string): PackageItem;
        static getItemAssetByURL(url: string): any;
        static normalizeURL(url: string): string;
        dispose(): void;
        get id(): string;
        get name(): string;
        get customId(): string;
        set customId(value: string);
        createObject(resName: string, userClass?: new () => GObject): GObject;
        internalCreateObject(item: PackageItem, userClass?: new () => GObject): GObject;
        getItemById(itemId: string): PackageItem;
        getItemByName(resName: string): PackageItem;
        getItemAssetByName(resName: string): Object;
        getItemAsset(item: PackageItem): Object;
    }
    export interface IObjectFactoryType {
        resolveExtension(pi: PackageItem): void;
        newObject(type: number | PackageItem, userClass?: new () => GObject): GObject;
    }
    export var Decls: {
        UIObjectFactory?: IObjectFactoryType;
    };
}

declare module 'fairygui-three/ui/PackageItem' {
    import { Audio } from 'three';
    import { PixelHitTestData } from "fairygui-three/core/hittest/PixelHitTest";
    import { Frame } from "fairygui-three/core/MovieClip";
    import { NTexture } from "fairygui-three/core/NTexture";
    import { BitmapFont } from "fairygui-three/core/text/BitmapFont";
    import { ByteBuffer } from "fairygui-three/utils/ByteBuffer";
    import { Rect } from "fairygui-three/utils/Rect";
    import { UIPackage } from "fairygui-three/ui/UIPackage";
    export class PackageItem {
        owner: UIPackage;
        type: number;
        objectType: number;
        id: string;
        name: string;
        width: number;
        height: number;
        file: string;
        decoded?: boolean;
        rawData?: ByteBuffer;
        highResolution?: Array<string>;
        branches?: Array<string>;
        scale9Grid?: Rect;
        scaleByTile?: boolean;
        tileGridIndice?: number;
        smoothing?: boolean;
        texture?: NTexture;
        pixelHitTestData?: PixelHitTestData;
        interval?: number;
        repeatDelay?: number;
        swing?: boolean;
        frames?: Frame[];
        extensionType?: any;
        bitmapFont?: BitmapFont;
        audioBuffer?: AudioBuffer;
        sound?: Audio;
        constructor();
        load(): Object;
        getBranch(): PackageItem;
        getHighResolution(): PackageItem;
        toString(): string;
    }
}

declare module 'fairygui-three/ui/GObjectPool' {
    import { GObject } from "fairygui-three/ui/GObject";
    export class GObjectPool {
        constructor();
        clear(): void;
        get count(): number;
        getObject(url: string): GObject;
        returnObject(obj: GObject): void;
    }
}

declare module 'fairygui-three/ui/UIObjectFactory' {
    import { GComponent } from "fairygui-three/ui/GComponent";
    import { GLoader } from "fairygui-three/ui/GLoader";
    import { GObject } from "fairygui-three/ui/GObject";
    import { PackageItem } from "fairygui-three/ui/PackageItem";
    export class UIObjectFactory {
        static extensions: Record<string, new () => GComponent>;
        static loaderType: new () => GLoader;
        static setExtension(url: string, type: new () => GComponent): void;
        static setLoaderExtension(type: new () => GLoader): void;
        static resolveExtension(pi: PackageItem): void;
        static newObject(type: number | PackageItem, userClass?: new () => GObject): GObject;
    }
}

declare module 'fairygui-three/ui/UIConfig' {
    import { Color4 } from "fairygui-three/utils/Color";
    export class UIConfig {
        static defaultFont: string;
        static windowModalWaiting: string;
        static globalModalWaiting: string;
        static modalLayerColor: Color4;
        static buttonSound: string;
        static buttonSoundVolumeScale: number;
        static horizontalScrollBar: string;
        static verticalScrollBar: string;
        static defaultScrollStep: number;
        static defaultScrollDecelerationRate: number;
        static defaultScrollBarDisplay: number;
        static defaultScrollTouchEffect: boolean;
        static defaultScrollBounceEffect: boolean;
        /**
         * 当滚动容器设置为“贴近ITEM”时，判定贴近到哪一个ITEM的滚动距离阀值。
         */
        static defaultScrollSnappingThreshold: number;
        /**
         * 当滚动容器设置为“页面模式”时，判定翻到哪一页的滚动距离阀值。
         */
        static defaultScrollPagingThreshold: number;
        static popupMenu: string;
        static popupMenu_seperator: string;
        static loaderErrorSign: string;
        static tooltipsWin: string;
        static defaultComboBoxVisibleItemCount: number;
        static touchScrollSensitivity: number;
        static touchDragSensitivity: number;
        static clickDragSensitivity: number;
        static bringWindowToFrontOnClick: boolean;
        static frameTimeForAsyncUIConstruction: number;
        static packageFileExtension: string;
    }
}

declare module 'fairygui-three/ui/DragDropManager' {
    import { GObject } from "fairygui-three/ui/GObject";
    export class DragDropManager {
        static get inst(): DragDropManager;
        constructor();
        get dragAgent(): GObject;
        get dragging(): boolean;
        startDrag(icon: string, sourceData?: any, touchPointID?: number): void;
        cancel(): void;
    }
}

declare module 'fairygui-three/ui/AsyncOperation' {
    import { GObject } from "fairygui-three/ui/GObject";
    export class AsyncOperation {
        callback: (obj: GObject) => void;
        constructor();
        createObject(pkgName: string, resName: string): void;
        createObjectFromURL(url: string): void;
        cancel(): void;
    }
}

declare module 'fairygui-three/ui/TranslationHelper' {
    import { PackageItem } from "fairygui-three/ui/PackageItem";
    import { XML } from "fairygui-three/utils/xml/XML";
    export class TranslationHelper {
        static strings: Record<string, Record<string, string>>;
        constructor();
        static loadFromXML(source: XML): void;
        static translateComponent(item: PackageItem): void;
    }
}

declare module 'fairygui-three/ui/UIContentScaler' {
    export enum ScaleMode {
        ConstantPixelSize = 0,
        ScaleWithScreenSize = 1,
        ConstantPhysicalSize = 2
    }
    export enum ScreenMatchMode {
        MatchWidthOrHeight = 0,
        MatchWidth = 1,
        MatchHeight = 2
    }
    export class UIContentScaler {
        static get scaleFactor(): number;
        static get scaleLevel(): number;
        static scaleWithScreenSize(designResolutionX: number, designResolutionY: number, screenMatchMode?: ScreenMatchMode): void;
        static setConstant(constantScaleFactor?: number): void;
    }
}

declare module 'fairygui-three/core/DisplayObject' {
    import { Blending, Camera, Euler, Object3D, Plane, Scene, Vector2, Vector3 } from "three";
    import { EventDispatcher } from "fairygui-three/event/EventDispatcher";
    import { Rect } from "fairygui-three/utils/Rect";
    import { IHitTest } from "fairygui-three/core/hittest/IHitTest";
    import { NGraphics } from "fairygui-three/core/NGraphics";
    import { HitTestContext } from "fairygui-three/core/Stage";
    export class DisplayObject extends EventDispatcher {
        opaque?: boolean;
        hitArea?: IHitTest;
        mask?: DisplayObject;
        reversedMask?: boolean;
        camera?: Camera;
        protected _contentRect: Rect;
        protected _alpha: number;
        protected _touchable: boolean;
        protected _touchDisabled?: boolean;
        protected _pos: Vector3;
        protected _rot: Euler;
        protected _pivot: Vector2;
        protected _pivotOffset: Vector3;
        protected _clipRect?: Rect;
        protected _clipPlanes?: Array<Plane>;
        protected _obj3D: Object3D;
        protected _graphics?: NGraphics;
        constructor();
        get obj3D(): Object3D;
        get name(): string;
        set name(value: string);
        get x(): number;
        set x(value: number);
        get y(): number;
        set y(value: number);
        get z(): number;
        set z(value: number);
        setPosition(x: number, y: number, z?: number, isPivot?: boolean): void;
        get width(): number;
        set width(value: number);
        get height(): number;
        set height(value: number);
        get contentRect(): Readonly<Rect>;
        setSize(wv: number, hv: number): void;
        protected ensureSizeCorrect(): void;
        protected onSizeChanged(): void;
        get pivotX(): number;
        set pivotX(value: number);
        get pivotY(): number;
        set pivotY(value: number);
        setPivot(xv: number, yv: number): void;
        get scaleX(): number;
        set scaleX(value: number);
        get scaleY(): number;
        set scaleY(value: number);
        setScale(xv: number, yv: number): void;
        get rotationX(): number;
        set rotationX(value: number);
        get rotationY(): number;
        set rotationY(value: number);
        get rotation(): number;
        set rotation(value: number);
        get parent(): Object3D;
        get stage(): Scene;
        get graphics(): NGraphics;
        get alpha(): number;
        set alpha(value: number);
        get touchable(): boolean;
        set touchable(value: boolean);
        get visible(): boolean;
        set visible(value: boolean);
        get color(): number;
        set color(value: number);
        get blendMode(): Blending;
        set blendMode(value: Blending);
        setLayer(layer: number): void;
        validateMatrix(): void;
        _getRenderCamera(): Camera;
        worldToLocal(pt: Vector3, direction?: Vector3, validate?: boolean): Vector3;
        localToWorld(pt: Vector3, validate?: boolean): Vector3;
        globalToLocal(x: number, y: number, result?: Vector2): Vector2;
        localToGlobal(x: number, y: number, result?: Vector2): Vector2;
        getBounds(targetSpace: Object3D, result?: Rect): Rect;
        transformPoint(x: number, y: number, targetSpace?: Object3D, result?: Vector2): Vector2;
        transformRect(rect: Rect, targetSpace?: Object3D, result?: Rect): Rect;
        addChild(child: DisplayObject): void;
        addChildAt(child: DisplayObject, index: number): void;
        removeChild(child: DisplayObject): void;
        removeChildAt(index: number): void;
        setChildIndex(child: DisplayObject, index: number): void;
        getIndex(child: DisplayObject): number;
        get numChildren(): number;
        get clipRect(): Rect;
        set clipRect(value: Rect);
        update(clipPlanes: any, alpha: number): void;
        protected hitTest(context: HitTestContext): DisplayObject;
        dispose(): void;
    }
    export function traverseUpdate(p: Object3D, clippingPlanes: any, alpha: number): void;
    export function traverseHitTest(p: Object3D, context: HitTestContext, mask?: any): DisplayObject;
}

declare module 'fairygui-three/core/Image' {
    import { Vector2 } from "three";
    import { Rect } from "fairygui-three/utils/Rect";
    import { DisplayObject } from "fairygui-three/core/DisplayObject";
    import { FillMesh } from "fairygui-three/core/mesh/FillMesh";
    import { IMeshFactory } from "fairygui-three/core/mesh/MeshFactory";
    import { VertexBuffer } from "fairygui-three/core/mesh/VertexBuffer";
    import { NTexture } from "fairygui-three/core/NTexture";
    export class Image extends DisplayObject implements IMeshFactory {
        protected _scaleByTile: boolean;
        protected _scale9Grid: Rect;
        protected _textureScale: Vector2;
        protected _tileGridIndice: number;
        protected _fillMesh?: FillMesh;
        constructor();
        get texture(): NTexture;
        set texture(value: NTexture);
        get textureScale(): Vector2;
        set textureScale(value: Vector2);
        get scale9Grid(): Rect;
        set scale9Grid(value: Rect);
        get scaleByTile(): boolean;
        set scaleByTile(value: boolean);
        get tileGridIndice(): number;
        set tileGridIndice(value: number);
        get fillMethod(): number;
        set fillMethod(value: number);
        get fillOrigin(): number;
        set fillOrigin(value: number);
        get fillClockwise(): boolean;
        set fillClockwise(value: boolean);
        get fillAmount(): number;
        set fillAmount(value: number);
        onPopulateMesh(vb: VertexBuffer): void;
    }
}

declare module 'fairygui-three/core/MovieClip' {
    import { Image } from "fairygui-three/core/Image";
    import { NTexture } from "fairygui-three/core/NTexture";
    export interface Frame {
        addDelay?: number;
        texture: NTexture;
    }
    export class MovieClip extends Image {
        interval: number;
        swing: boolean;
        repeatDelay: number;
        timeScale: number;
        constructor();
        get frames(): Frame[];
        set frames(value: Frame[]);
        get frameCount(): number;
        get frame(): number;
        set frame(value: number);
        get playing(): boolean;
        set playing(value: boolean);
        rewind(): void;
        syncStatus(anotherMc: MovieClip): void;
        advance(timeInMiniseconds: number): void;
        setPlaySettings(start?: number, end?: number, times?: number, endAt?: number): void;
    }
}

declare module 'fairygui-three/core/Shape' {
    import { DisplayObject } from "fairygui-three/core/DisplayObject";
    import { Color4 } from "fairygui-three/utils/Color";
    import { HitTestContext } from "fairygui-three/core/Stage";
    export class Shape extends DisplayObject {
        constructor();
        drawRect(lineWidth: number, lineColor: Color4, fillColor: Color4): void;
        drawRoundRect(lineWidth: number, lineColor: Color4, fillColor: Color4, topLeftRadius: number, topRightRadius: number, bottomLeftRadius: number, bottomRightRadius: number): void;
        drawEllipse(lineWidth: number, centerColor: Color4, lineColor: Color4, fillColor: Color4, startDegree?: number, endDegree?: number): void;
        drawPolygon(points: Array<number>, fillColor: Color4, lineWidth?: number, lineColor?: Color4): void;
        drawRegularPolygon(sides: number, lineWidth: number, centerColor: Color4, lineColor: Color4, fillColor: Color4, rotation: number, distances: Array<number>): void;
        clear(): void;
        protected hitTest(context: HitTestContext): DisplayObject;
    }
}

declare module 'fairygui-three/core/Stage' {
    import { Scene, Vector2, Renderer, AudioListener, Object3D, Camera, Vector3, Matrix4 } from "three";
    import { DisplayObject } from "fairygui-three/core/DisplayObject";
    import { EventDispatcher } from "fairygui-three/event/EventDispatcher";
    type ScreenMode = "none" | "horizontal" | "vertical";
    export var UILayer: number;
    export interface StageInitParameters {
        screenMode?: ScreenMode;
        defaultLayer?: number;
    }
    export class Stage {
        static fontRebuilt?: boolean;
        static audioListener?: AudioListener;
        static disableMatrixValidation: boolean;
        static readonly eventDispatcher: EventDispatcher;
        static init(renderer: Renderer, parameters?: StageInitParameters): void;
        static set scene(value: Scene);
        static get scene(): Scene;
        static get domElement(): HTMLCanvasElement;
        static get devicePixelRatio(): number;
        static get touchScreen(): boolean;
        static get camera(): Camera;
        static set camera(value: Camera);
        static get width(): number;
        static get height(): number;
        static get touchPos(): Vector2;
        static get canvasTransform(): Matrix4;
        static get touchTarget(): DisplayObject;
        static get touchCount(): number;
        static getTouchPos(touchId?: number, ret?: Vector2): Vector2;
        static addTouchMonitor(touchId: number, target: EventDispatcher): void;
        static removeTouchMonitor(target: EventDispatcher): void;
        static cancelClick(touchId: number): void;
        static update(): void;
        static hitTest(x: number, y: number, forTouch?: boolean): DisplayObject;
        static setFocus(obj: DisplayObject): void;
    }
    type HitTestRay = {
        origin: Vector3;
        direction: Vector3;
    };
    export class HitTestContext {
        readonly screenPt: Vector3;
        forTouch: boolean;
        get camera(): Camera;
        set camera(value: Camera);
        get ray(): HitTestRay;
        set ray(value: HitTestRay);
        getLocal(obj: DisplayObject): Vector2;
    }
    export function screenToWorld(camera: Camera, x: number, y: number, outPt: Vector3, outDir: Vector3): void;
    export function worldToScreen(camera: Camera, input: Vector3, output: Vector2): void;
    export function broadcastEvent(p: Object3D, type: string, data?: any): void;
    export function bubbleEvent(p: Object3D, type: string, data?: any, addChain?: Array<EventDispatcher>): void;
    export {};
}

declare module 'fairygui-three/core/NTexture' {
    import { Rect } from "fairygui-three/utils/Rect";
    import { Texture, Vector2 } from "three";
    export class NTexture {
        uvRect: Rect;
        rotated: boolean;
        region: Rect;
        offset: Vector2;
        originalSize: Vector2;
        constructor(texture?: Texture, xScale?: number, yScale?: number);
        createSubTexture(region: Rect, rotated?: boolean, offset?: Vector2, originalSize?: Vector2): NTexture;
        get width(): number;
        get height(): number;
        get nativeTexture(): Texture;
        getDrawRect(drawRect: Rect): Rect;
        getUV(uv: Array<Vector2>): void;
        get root(): NTexture;
        reload(nativeTexture: Texture): void;
        dispose(): void;
    }
    export const EmptyTexture: NTexture;
}

declare module 'fairygui-three/core/NGraphics' {
    import { Object3D } from "three";
    import { FlipType } from "fairygui-three/ui/FieldTypes";
    import { Rect } from "fairygui-three/utils/Rect";
    import { IMeshFactory } from "fairygui-three/core/mesh/MeshFactory";
    import { VertexBuffer } from "fairygui-three/core/mesh/VertexBuffer";
    import { NMaterial } from "fairygui-three/core/NMaterial";
    import { NTexture } from "fairygui-three/core/NTexture";
    export class NGraphics implements IMeshFactory {
        constructor(owner: Object3D);
        get texture(): NTexture;
        set texture(value: NTexture);
        get material(): NMaterial;
        set material(value: NMaterial);
        get meshFactory(): IMeshFactory;
        set meshFactory(value: IMeshFactory);
        getMeshFactory<T extends IMeshFactory>(type: new () => T): T;
        setDrawRect(rect: Rect): void;
        get flip(): FlipType;
        set flip(value: FlipType);
        get color(): number;
        set color(value: number);
        get grayed(): boolean;
        set grayed(value: boolean);
        setKeyword(key: string, value: Boolean): void;
        setMeshDirty(): void;
        updateMesh(): boolean;
        update(clipPlanes: any, alpha: number): void;
        updateMeshNow(): void;
        onPopulateMesh(vb: VertexBuffer): void;
    }
}

declare module 'fairygui-three/core/NMaterial' {
    import { ShaderMaterial, Texture } from "three";
    export class NMaterial extends ShaderMaterial {
        map: Texture;
        constructor();
    }
}

declare module 'fairygui-three/core/text/TextField' {
    import { AlignType, AutoSizeType, VertAlignType } from "fairygui-three/ui/FieldTypes";
    import { HtmlElement } from "fairygui-three/utils/html/HtmlElement";
    import { Rect } from "fairygui-three/utils/Rect";
    import { DisplayObject } from "fairygui-three/core/DisplayObject";
    import { IMeshFactory } from "fairygui-three/core/mesh/MeshFactory";
    import { VertexBuffer } from "fairygui-three/core/mesh/VertexBuffer";
    import { BaseFont } from "fairygui-three/core/text/BaseFont";
    import { TextFormat } from "fairygui-three/core/text/TextFormat";
    export class TextField extends DisplayObject implements IMeshFactory {
        protected _verticalAlign: VertAlignType;
        protected _textFormat: TextFormat;
        protected _text: string;
        protected _autoSize: AutoSizeType;
        protected _wordWrap: boolean;
        protected _singleLine: boolean;
        protected _html: boolean;
        protected _maxWidth: number;
        protected _elements: Array<HtmlElement>;
        protected _lines: Array<LineInfo>;
        protected _charPositions: Array<CharPosition>;
        protected _font: BaseFont;
        protected _textWidth: number;
        protected _textHeight: number;
        protected _textChanged: boolean;
        protected _yOffset: number;
        protected _fontSizeScale: number;
        protected _fontVersion: number;
        protected _parsedText: string;
        protected _updatingSize?: boolean;
        protected isInput?: boolean;
        protected isRich?: boolean;
        constructor();
        get textFormat(): TextFormat;
        applyFormat(): void;
        get align(): AlignType;
        set align(value: AlignType);
        get verticalAlign(): VertAlignType;
        set verticalAlign(value: VertAlignType);
        get text(): string;
        set text(value: string);
        get htmlText(): string;
        set htmlText(value: string);
        get parsedText(): string;
        get autoSize(): AutoSizeType;
        set autoSize(value: AutoSizeType);
        get wordWrap(): boolean;
        set wordWrap(value: boolean);
        get singleLine(): boolean;
        set singleLine(value: boolean);
        get textWidth(): number;
        get textHeight(): number;
        get maxWidth(): number;
        set maxWidth(value: number);
        get htmlElements(): Array<HtmlElement>;
        get lines(): Array<LineInfo>;
        get charPositions(): Array<CharPosition>;
        redraw(): boolean;
        getLinesShape(startLine: number, startCharX: number, endLine: number, endCharX: number, clipped: boolean, result: Array<Rect>): void;
        protected onSizeChanged(): void;
        ensureSizeCorrect(): void;
        update(clippingPlanes: any, alpha: number): void;
        onPopulateMesh(vb: VertexBuffer): void;
        protected refreshObjects(): void;
        protected cleanupObjects(): void;
    }
    export const GUTTER_X: number;
    export const GUTTER_Y: number;
    export class LineInfo {
        width: number;
        height: number;
        baseline: number;
        charIndex: number;
        charCount: number;
        y: number;
        y2: number;
    }
    export class CharPosition {
        charIndex: number;
        lineIndex: number;
        offsetX: number;
        vertCount: number;
        width: number;
        imgIndex: number;
    }
}

declare module 'fairygui-three/core/text/RichTextField' {
    import { HtmlElement } from "fairygui-three/utils/html/HtmlElement";
    import { HtmlParseOptions } from "fairygui-three/utils/html/HtmlParseOptions";
    import { IHtmlPageContext } from "fairygui-three/utils/html/IHtmlPageContext";
    import { TextField } from "fairygui-three/core/text/TextField";
    export class RichTextField extends TextField {
        htmlPageContext: IHtmlPageContext;
        htmlParseOptions: HtmlParseOptions;
        constructor();
        getHtmlElement(name: string): HtmlElement;
        showHtmlObject(index: number, show: boolean): void;
        dispose(): void;
        protected cleanupObjects(): void;
        protected refreshObjects(): void;
    }
}

declare module 'fairygui-three/core/text/InputTextField' {
    import { TextField } from "fairygui-three/core/text/TextField";
    export class InputTextField extends TextField {
        maxLength: number;
        keyboardType: string;
        restrict: string;
        editable: boolean;
        constructor();
        get text(): string;
        set text(value: string);
        get promptText(): string;
        set promptText(value: string);
        get password(): boolean;
        set password(value: boolean);
        protected onSizeChanged(): void;
        applyFormat(): void;
        dispose(): void;
    }
}

declare module 'fairygui-three/core/text/TextFormat' {
    import { AlignType } from "fairygui-three/ui/FieldTypes";
    import { Vector2 } from "three";
    export class TextFormat {
        size: number;
        font: string;
        color: number;
        lineSpacing: number;
        letterSpacing: number;
        bold: boolean;
        underline: boolean;
        italic: boolean;
        strikethrough: boolean;
        align: AlignType;
        outline: number;
        outlineColor: number;
        shadowOffset: Vector2;
        shadowColor: number;
        /**@internal */
        _colorChanged: boolean;
        copy(source: TextFormat): void;
        equalStyle(aFormat: TextFormat): boolean;
    }
}

declare module 'fairygui-three/core/text/DynamicFont' {
    import { NTexture } from "fairygui-three/core/NTexture";
    import { TextFormat } from "fairygui-three/core/text/TextFormat";
    import { GlyphInfo } from "fairygui-three/core/text/BaseFont";
    import { VertexBuffer } from "fairygui-three/core/mesh/VertexBuffer";
    import { Texture } from "three";
    import { Rect } from "fairygui-three/utils/Rect";
    import { Color4 } from "fairygui-three/utils/Color";
    type OutlineGlyph = {
        uvRect: Rect;
        vertRect: Rect;
        chl?: number;
        ver: number;
    };
    type Glyph = {
        uvRect?: Rect;
        vertRect?: Rect;
        advance?: number;
        sourceRect?: Rect;
        chl?: number;
        baseline?: number;
        ver: number;
        outlines?: Record<string, OutlineGlyph>;
    };
    export class DynamicFont {
        version: number;
        mainTexture: NTexture;
        isDynamic: boolean;
        keepCrisp: boolean;
        protected _canvas: HTMLCanvasElement;
        protected _context: CanvasRenderingContext2D;
        protected _texture: Texture;
        protected _packers: Array<BinPacker>;
        protected _glyphs: Record<string, Glyph>;
        protected _name: string;
        protected _format: TextFormat;
        protected _size: number;
        protected _glyph: Glyph;
        protected _color: Color4;
        protected _outlineColor: Color4;
        protected _scale: number;
        protected eSpan: HTMLSpanElement;
        protected eBlock: HTMLDivElement;
        constructor();
        get name(): string;
        set name(value: string);
        protected rebuild(): void;
        setFormat(format: TextFormat, fontSizeScale: number): void;
        prepareCharacters(text: string): void;
        protected getGlyphsOf(ch: string, size: number): Glyph;
        protected prepareChar(ch: string, size: number, glyph: Glyph): Glyph;
        protected prepareOutline(ch: string, glyph: Glyph, size: number, outline: number): void;
        protected measureChar(ch: string, size: number): Glyph;
        protected addNode(w: number, h: number): Node;
        getGlyph(ch: string, ret: GlyphInfo): boolean;
        drawGlyph(x: number, y: number, vb: VertexBuffer): number;
        drawLine(x: number, y: number, width: number, fontSize: number, type: number, vb: VertexBuffer): number;
        getLineHeight(size: number): number;
        getBaseline(ch: string, font: string, size: number): number;
    }
    type Node = {
        x: number;
        y: number;
        z?: number;
    };
    class BinPacker {
        full?: boolean;
        init(w: number, h: number): void;
        add(w: number, h: number): Node;
    }
    export {};
}

declare module 'fairygui-three/core/text/FontManager' {
    import { BaseFont } from "fairygui-three/core/text/BaseFont";
    export class FontManager {
        static fonts: Record<string, BaseFont>;
        static packageFontGetter: (name: string) => BaseFont;
        static registerFont(font: BaseFont): void;
        static unregisterFont(font: BaseFont): void;
        static getFont(name: string): BaseFont;
    }
}

declare module 'fairygui-three/event/Event' {
    import { Pool } from "fairygui-three/utils/Pool";
    import { DisplayObject } from "fairygui-three/core/DisplayObject";
    import { EventDispatcher } from "fairygui-three/event/EventDispatcher";
    export type EventType = "touch_begin" | "touch_end" | "touch_move" | "click" | "right_click" | "roll_over" | "roll_out" | "mouse_wheel" | "content_scale_factor_changed" | "added_to_stage" | "removed_from_stage" | "pos_changed" | "size_changed" | "status_changed" | "focus_in" | "focus_out" | "drag_start" | "drag_move" | "drag_end" | "drop" | "scroll" | "scroll_end" | "pull_down_release" | "pull_up_release" | "click_item" | "click_link" | "play_end" | "gear_stop";
    export interface InputInfo {
        x: number;
        y: number;
        mouseWheelDelta: number;
        touchId: number;
        button: number;
        clickCount: number;
        holdTime: number;
        shiftKey?: boolean;
        ctrlKey?: boolean;
        commandKey?: boolean;
        isDblClick: boolean;
        isRightButton: boolean;
    }
    export var lastInput: InputInfo;
    export class Event {
        data: any;
        _defaultPrevented: boolean;
        _stopsPropagation: boolean;
        _touchCapture: boolean;
        _callChain: Array<EventDispatcher>;
        _type: string;
        _sender: EventDispatcher;
        _initiator: DisplayObject;
        constructor();
        get type(): string;
        get sender(): EventDispatcher;
        get initiator(): DisplayObject;
        get input(): InputInfo;
        stopPropagation(): void;
        preventDefault(): void;
        captureTouch(): void;
        get isDefaultPrevented(): boolean;
    }
    export var EventPool: Pool<Event>;
}

declare module 'fairygui-three/event/EventDispatcher' {
    import { Event, EventType } from "fairygui-three/event/Event";
    type Listeners = {
        dispatching?: number;
        callbacks: Array<any>;
        captures: Array<any>;
    };
    export class EventDispatcher {
        _listeners: Record<string, Listeners>;
        constructor();
        on(type: EventType, callback: Function, target?: any, capture?: boolean): void;
        on(type: string, callback: Function, target?: any, capture?: boolean): void;
        off(type: EventType, callback: Function, target?: any, capture?: boolean): void;
        off(type: string, callback: Function, target?: any, capture?: boolean): void;
        offAll(type?: EventType): void;
        offAll(type?: string): void;
        hasListener(type: EventType, callback?: Function, target?: any, capture?: boolean): boolean;
        hasListener(type: string, callback?: Function, target?: any, capture?: boolean): boolean;
        dispatchEvent(type: EventType, data?: any): boolean;
        dispatchEvent(type: string, data?: any): boolean;
        _dispatch(col: Listeners, ev: Event, capture?: boolean): void;
    }
    export {};
}

declare module 'fairygui-three/tween/GTween' {
    import { GTweener } from "fairygui-three/tween/GTweener";
    export class GTween {
        static catchCallbackExceptions: boolean;
        static to(start: number, end: number, duration: number): GTweener;
        static to2(start: number, start2: number, end: number, end2: number, duration: number): GTweener;
        static to3(start: number, start2: number, start3: number, end: number, end2: number, end3: number, duration: number): GTweener;
        static to4(start: number, start2: number, start3: number, start4: number, end: number, end2: number, end3: number, end4: number, duration: number): GTweener;
        static toColor(start: number, end: number, duration: number): GTweener;
        static delayedCall(delay: number): GTweener;
        static shake(startX: number, startY: number, amplitude: number, duration: number): GTweener;
        static isTweening(target: any, propType?: any): Boolean;
        static kill(target: any, complete?: boolean, propType?: any): void;
        static getTween(target: any, propType?: any): GTweener;
    }
}

declare module 'fairygui-three/tween/GTweener' {
    import { GPath } from "fairygui-three/tween/GPath";
    import { TweenValue } from "fairygui-three/tween/TweenValue";
    export class GTweener {
        _target: any;
        _propType: any;
        _killed: boolean;
        _paused: boolean;
        constructor();
        setDelay(value: number): GTweener;
        get delay(): number;
        setDuration(value: number): GTweener;
        get duration(): number;
        setBreakpoint(value: number): GTweener;
        setEase(value: number): GTweener;
        setEasePeriod(value: number): GTweener;
        setEaseOvershootOrAmplitude(value: number): GTweener;
        setRepeat(repeat: number, yoyo?: boolean): GTweener;
        get repeat(): number;
        setTimeScale(value: number): GTweener;
        setSnapping(value: boolean): GTweener;
        setTarget(value: any, propType?: any): GTweener;
        get target(): any;
        setPath(value: GPath): GTweener;
        setUserData(value: any): GTweener;
        get userData(): any;
        onUpdate(callback: Function, target?: any): GTweener;
        onStart(callback: Function, target?: any): GTweener;
        onComplete(callback: Function, target?: any): GTweener;
        get startValue(): TweenValue;
        get endValue(): TweenValue;
        get value(): TweenValue;
        get deltaValue(): TweenValue;
        get normalizedTime(): number;
        get completed(): boolean;
        get allCompleted(): boolean;
        setPaused(paused: boolean): GTweener;
        /**
          * seek position of the tween, in seconds.
          */
        seek(time: number): void;
        kill(complete?: boolean): void;
        _to(start: number, end: number, duration: number): GTweener;
        _to2(start: number, start2: number, end: number, end2: number, duration: number): GTweener;
        _to3(start: number, start2: number, start3: number, end: number, end2: number, end3: number, duration: number): GTweener;
        _to4(start: number, start2: number, start3: number, start4: number, end: number, end2: number, end3: number, end4: number, duration: number): GTweener;
        _toColor(start: number, end: number, duration: number): GTweener;
        _shake(startX: number, startY: number, amplitude: number, duration: number): GTweener;
        _init(): void;
        _reset(): void;
        _update(dt: number): void;
    }
}

declare module 'fairygui-three/tween/EaseType' {
    export enum EaseType {
        Linear = 0,
        SineIn = 1,
        SineOut = 2,
        SineInOut = 3,
        QuadIn = 4,
        QuadOut = 5,
        QuadInOut = 6,
        CubicIn = 7,
        CubicOut = 8,
        CubicInOut = 9,
        QuartIn = 10,
        QuartOut = 11,
        QuartInOut = 12,
        QuintIn = 13,
        QuintOut = 14,
        QuintInOut = 15,
        ExpoIn = 16,
        ExpoOut = 17,
        ExpoInOut = 18,
        CircIn = 19,
        CircOut = 20,
        CircInOut = 21,
        ElasticIn = 22,
        ElasticOut = 23,
        ElasticInOut = 24,
        BackIn = 25,
        BackOut = 26,
        BackInOut = 27,
        BounceIn = 28,
        BounceOut = 29,
        BounceInOut = 30,
        Custom = 31
    }
}

declare module 'fairygui-three/utils/UBBParser' {
    export class UBBParser {
        protected _handlers: Record<string, (tagName: string, end: boolean, attr: string) => string>;
        defaultImgWidth: number;
        defaultImgHeight: number;
        lastColor: string;
        lastSize: string;
        constructor();
        protected onTag_URL(tagName: string, end: boolean, attr: string): string;
        protected onTag_IMG(tagName: string, end: boolean, attr: string): string;
        protected onTag_B(tagName: string, end: boolean, attr: string): string;
        protected onTag_I(tagName: string, end: boolean, attr: string): string;
        protected onTag_U(tagName: string, end: boolean, attr: string): string;
        protected onTag_Simple(tagName: string, end: boolean, attr: string): string;
        protected onTag_COLOR(tagName: string, end: boolean, attr: string): string;
        protected onTag_FONT(tagName: string, end: boolean, attr: string): string;
        protected onTag_SIZE(tagName: string, end: boolean, attr: string): string;
        protected getTagText(remove?: boolean): string;
        parse(text: string, remove?: boolean): string;
    }
    export var defaultParser: UBBParser;
}

declare module 'fairygui-three/utils/ByteBuffer' {
    import { Color4 } from "fairygui-three/utils/Color";
    export class ByteBuffer {
        stringTable: Array<string>;
        version: number;
        littleEndian?: boolean;
        protected _buffer: ArrayBuffer;
        protected _view: DataView;
        protected _pos: number;
        protected _length: number;
        constructor(buffer: ArrayBuffer, offset?: number, length?: number);
        get data(): ArrayBuffer;
        get pos(): number;
        set pos(value: number);
        get length(): number;
        skip(count: number): void;
        readByte(): number;
        readBool(): boolean;
        readShort(): number;
        readUshort(): number;
        readInt(): number;
        readUint(): number;
        readFloat(): number;
        readString(len?: number): string;
        readS(): string;
        readSArray(cnt: number): Array<string>;
        writeS(value: string): void;
        readColor(): number;
        readFullColor(): Color4;
        readChar(): string;
        readBuffer(): ByteBuffer;
        seek(indexTablePos: number, blockIndex: number): boolean;
    }
}

declare module 'fairygui-three/utils/Rect' {
    import { Vector2 } from "three";
    export class Rect {
        x: number;
        y: number;
        width: number;
        height: number;
        constructor(x?: number, y?: number, width?: number, height?: number);
        set(x: number, y: number, width: number, height: number): void;
        setMinMax(xMin: number, yMin: number, xMax: number, yMax: number): void;
        get position(): Vector2;
        get size(): Vector2;
        get xMin(): number;
        set xMin(value: number);
        get xMax(): number;
        set xMax(value: number);
        get yMin(): number;
        set yMin(value: number);
        get yMax(): number;
        set yMax(value: number);
        intersection(another: Rect): Rect;
        union(another: Rect): Rect;
        extend(x: number, y: number): void;
        contains(x: number | Vector2, y?: number): boolean;
        copy(source: Rect): void;
        clone(): Rect;
    }
}

declare module 'fairygui-three/utils/Color' {
    import { Color } from "three";
    export class Color4 extends Color {
        a: number;
        constructor(rgb?: number, a?: number);
    }
}

declare module 'fairygui-three/utils/Timers' {
    export class Timers {
        static deltaTime: number;
        static time: number;
        static frameCount: number;
        static add(delayInMiniseconds: number, repeat: number, callback: Function, target?: any, callbackParam?: any): void;
        static callLater(callback: Function, target?: any, callbackParam?: any): void;
        static callDelay(delay: number, callback: Function, target?: any, callbackParam?: any): void;
        static addUpdate(callback: Function, target?: any, callbackParam?: any): void;
        static exists(callback: Function, target?: any): boolean;
        static remove(callback: Function, target?: any): void;
    }
}

declare module 'fairygui-three/utils/ToolSet' {
    export function convertToHtmlColor(argb: number, hasAlpha?: boolean): string;
    export function convertFromHtmlColor(str: string, hasAlpha?: boolean): number;
    export function clamp(value: number, min: number, max: number): number;
    export function clamp01(value: number): number;
    export function lerp(start: number, end: number, percent: number): number;
    export function repeat(t: number, length: number): number;
    export function distance(x1: number, y1: number, x2: number, y2: number): number;
}

declare module 'fairygui-three/gears/GearBase' {
    import { Controller } from "fairygui-three/ui/Controller";
    import { GObject } from "fairygui-three/ui/GObject";
    import { GTweener } from "fairygui-three/tween/GTweener";
    import { ByteBuffer } from "fairygui-three/utils/ByteBuffer";
    export class GearBase {
        static disableAllTweenEffect?: boolean;
        _owner: GObject;
        protected _controller: Controller;
        protected _tweenConfig: GearTweenConfig;
        dispose(): void;
        get controller(): Controller;
        set controller(val: Controller);
        get tweenConfig(): GearTweenConfig;
        protected get allowTween(): boolean;
        setup(buffer: ByteBuffer): void;
        updateFromRelations(dx: number, dy: number): void;
        protected addStatus(pageId: string, buffer: ByteBuffer): void;
        protected init(): void;
        apply(): void;
        updateState(): void;
    }
    export class GearTweenConfig {
        tween: boolean;
        easeType: number;
        duration: number;
        delay: number;
        _displayLockToken: number;
        _tweener: GTweener;
        constructor();
    }
    export interface IGearXY {
    }
}

declare module 'fairygui-three/ui/Relations' {
    import { GObject } from "fairygui-three/ui/GObject";
    import { ByteBuffer } from "fairygui-three/utils/ByteBuffer";
    export class Relations {
        handling: GObject;
        constructor(owner: GObject);
        add(target: GObject, relationType: number, usePercent?: boolean): void;
        remove(target: GObject, relationType?: number): void;
        contains(target: GObject): boolean;
        clearFor(target: GObject): void;
        clearAll(): void;
        copyFrom(source: Relations): void;
        dispose(): void;
        onOwnerSizeChanged(dWidth: number, dHeight: number, applyPivot: boolean): void;
        get empty(): boolean;
        setup(buffer: ByteBuffer, parentToChild: boolean): void;
    }
}

declare module 'fairygui-three/ui/Margin' {
    export class Margin {
        left: number;
        right: number;
        top: number;
        bottom: number;
        copy(source: Margin): void;
    }
}

declare module 'fairygui-three/core/hittest/PixelHitTest' {
    import { ByteBuffer } from "fairygui-three/utils/ByteBuffer";
    import { Rect } from "fairygui-three/utils/Rect";
    import { IHitTest } from "fairygui-three/core/hittest/IHitTest";
    export class PixelHitTestData {
        pixelWidth: number;
        scale: number;
        pixels: Uint8Array;
        load(ba: ByteBuffer): void;
    }
    export class PixelHitTest implements IHitTest {
        offsetX: number;
        offsetY: number;
        sourceWidth: number;
        sourceHeight: number;
        constructor(data: PixelHitTestData, offsetX: number, offsetY: number, sourceWidth: number, sourceHeight: number);
        hitTest(contentRect: Rect, x: number, y: number): boolean;
    }
}

declare module 'fairygui-three/core/text/BitmapFont' {
    import { BaseFont, GlyphInfo } from "fairygui-three/core/text/BaseFont";
    import { TextFormat } from "fairygui-three/core/text/TextFormat";
    import { VertexBuffer } from "fairygui-three/core/mesh/VertexBuffer";
    import { NTexture } from "fairygui-three/core/NTexture";
    import { Vector2 } from "three";
    export class BitmapFont implements BaseFont {
        name: string;
        version: number;
        mainTexture: NTexture;
        size: number;
        glyphs: Record<string, BMGlyph>;
        resizable: boolean;
        hasChannel: boolean;
        tint: boolean;
        constructor();
        setFormat(format: TextFormat, fontSizeScale: number): void;
        prepareCharacters(text: string): void;
        getGlyph(ch: string, ret: GlyphInfo): boolean;
        drawGlyph(x: number, y: number, vb: VertexBuffer): number;
        drawLine(x: number, y: number, width: number, fontSize: number, type: number, vb: VertexBuffer): number;
        getLineHeight(size: number): number;
    }
    export class BMGlyph {
        x: number;
        y: number;
        width: number;
        height: number;
        advance: number;
        lineHeight: number;
        channel: number;
        uv: Array<Vector2>;
    }
}

declare module 'fairygui-three/utils/xml/XML' {
    export class XML {
        name: string;
        text: string;
        constructor(XmlString?: string);
        get attributes(): Record<string, string>;
        getAttrString(attrName: string, defValue?: string): string;
        getAttrInt(attrName: string, defValue?: number): number;
        getAttrFloat(attrName: string, defValue?: number): number;
        getAttrBool(attrName: string, defValue?: boolean): boolean;
        getAttrColor(attrName: string, defValue?: number): number;
        setAttribute(attrName: string, attrValue: string): void;
        getNode(selector: string): XML;
        elements(selector?: string): Array<XML>;
        parse(aSource: string): void;
        reset(): void;
    }
}

declare module 'fairygui-three/core/hittest/IHitTest' {
    import { Rect } from "fairygui-three/utils/Rect";
    export interface IHitTest {
        hitTest(contentRect: Rect, x: number, y: number): boolean;
    }
}

declare module 'fairygui-three/core/mesh/FillMesh' {
    import { IMeshFactory } from "fairygui-three/core/mesh/MeshFactory";
    import { VertexBuffer } from "fairygui-three/core/mesh/VertexBuffer";
    import { FillMethod } from "fairygui-three/ui/FieldTypes";
    export class FillMesh implements IMeshFactory {
        method: FillMethod;
        origin: number;
        amount: number;
        clockwise: boolean;
        constructor();
        onPopulateMesh(vb: VertexBuffer): void;
    }
}

declare module 'fairygui-three/core/mesh/MeshFactory' {
    import { VertexBuffer } from "fairygui-three/core/mesh/VertexBuffer";
    export interface IMeshFactory {
        onPopulateMesh(vb: VertexBuffer): void;
    }
}

declare module 'fairygui-three/core/mesh/VertexBuffer' {
    import { Vector2, Vector3 } from "three";
    import { Color4 } from "fairygui-three/utils/Color";
    import { Rect } from "fairygui-three/utils/Rect";
    /**
      * 1---2
      * | / |
      * 0---3
      * threejs anti-clockwise vertex order. ie 0-2-1， 0-3-2
      */
    export class VertexBuffer {
        contentRect: Rect;
        uvRect: Rect;
        vertexColor: Color4;
        textureSize: Vector2;
        readonly vertices: Array<number>;
        readonly uvs: Array<number>;
        readonly colors: Array<number>;
        readonly triangles: Array<number>;
        static begin(source?: VertexBuffer): VertexBuffer;
        constructor();
        end(): void;
        clear(): void;
        get currentVertCount(): number;
        addVert(x: number, y: number, z: number, uv_x?: number | Color4, uv_y?: number, color?: Color4): void;
        addQuad(vertRect: Rect, uvRect?: Rect | Array<Vector2>, color?: Color4): void;
        repeatColors(value: Array<number>, startIndex: number, count: number): void;
        addTriangle(idx0: number, idx1: number, idx2: number): void;
        addTriangles(startVertexIndex?: number, idxList?: Array<number>): void;
        getPosition(index: number, ret: Vector3): Vector3;
        append(vb: VertexBuffer): void;
    }
}

declare module 'fairygui-three/utils/html/HtmlElement' {
    import { Vector2 } from "three";
    import { TextFormat } from "fairygui-three/core/text/TextFormat";
    import { Pool } from "fairygui-three/utils/Pool";
    import { IHtmlObject } from "fairygui-three/utils/html/IHtmlObject";
    export enum HtmlElementType {
        Text = 0,
        Link = 1,
        Image = 2,
        Input = 3,
        Select = 4,
        Object = 5,
        LinkEnd = 6
    }
    export class HtmlElement {
        type: HtmlElementType;
        name: string;
        text: string;
        format: TextFormat;
        charIndex: number;
        htmlObject: IHtmlObject;
        status: number;
        space: number;
        position: Vector2;
        _attributes: Record<string, any>;
        constructor();
        getAttr(attrName: string): any;
        setAttr(attrName: string, attrValue: any): void;
        getAttrString(attrName: string, defValue?: string): string;
        getAttrInt(attrName: string, defValue?: number): number;
        getAttrFloat(attrName: string, defValue?: number): number;
        getAttrBool(attrName: string, defValue?: boolean): boolean;
        getAttrColor(attrName: string, defValue?: number): number;
        fetchAttributes(): void;
        get isEntity(): boolean;
        reset(): void;
    }
    export var elementPool: Pool<HtmlElement>;
}

declare module 'fairygui-three/core/text/BaseFont' {
    import { NTexture } from "fairygui-three/core/NTexture";
    import { TextFormat } from "fairygui-three/core/text/TextFormat";
    import { VertexBuffer } from "fairygui-three/core/mesh/VertexBuffer";
    export type GlyphInfo = {
        width: number;
        height: number;
        baseline: number;
    };
    export interface BaseFont {
        name: string;
        version: number;
        mainTexture: NTexture;
        isDynamic?: boolean;
        keepCrisp?: boolean;
        setFormat(format: TextFormat, fontSizeScale: number): void;
        prepareCharacters(text: string): void;
        getGlyph(ch: string, ret: GlyphInfo): boolean;
        drawGlyph(x: number, y: number, vb: VertexBuffer): number;
        drawLine(x: number, y: number, width: number, fontSize: number, type: number, vb: VertexBuffer): number;
        getLineHeight(size: number): number;
    }
}

declare module 'fairygui-three/utils/html/HtmlParseOptions' {
    export class HtmlParseOptions {
        linkUnderline: boolean;
        linkColor: number;
        ignoreWhiteSpace: boolean;
        static defaultLinkUnderline: boolean;
        static defaultLinkColor: number;
        constructor();
    }
}

declare module 'fairygui-three/utils/html/IHtmlPageContext' {
    import { RichTextField } from "fairygui-three/core/text/RichTextField";
    import { HtmlElement } from "fairygui-three/utils/html/HtmlElement";
    import { IHtmlObject } from "fairygui-three/utils/html/IHtmlObject";
    export interface IHtmlPageContext {
        createObject(owner: RichTextField, element: HtmlElement): IHtmlObject;
        freeObject(obj: IHtmlObject): void;
    }
}

declare module 'fairygui-three/utils/Pool' {
    export class Pool<T extends Object> {
        pool: Array<T>;
        _init: (arg0: T, ...argArray: any[]) => void;
        _reset: (arg0: T) => void;
        _ct: new () => T;
        constructor(type: new () => T, init?: (arg0: T) => void, reset?: (arg0: T) => void);
        borrow(...argArray: any[]): T;
        returns(element: T | Array<T>): void;
    }
}

declare module 'fairygui-three/tween/GPath' {
    import { Vector2 } from "three";
    import { GPathPoint } from "fairygui-three/tween/GPathPoint";
    export class GPath {
        constructor();
        get length(): number;
        create2(pt1: GPathPoint, pt2: GPathPoint, pt3?: GPathPoint, pt4?: GPathPoint): void;
        create(points: Array<GPathPoint>): void;
        clear(): void;
        getPointAt(t: number, result?: Vector2): Vector2;
        get segmentCount(): number;
        getAnchorsInSegment(segmentIndex: number, points?: Array<Vector2>): Array<Vector2>;
        getPointsInSegment(segmentIndex: number, t0: number, t1: number, points?: Array<Vector2>, ts?: Array<number>, pointDensity?: number): Array<Vector2>;
        getAllPoints(points?: Array<Vector2>, ts?: Array<number>, pointDensity?: number): Array<Vector2>;
    }
}

declare module 'fairygui-three/tween/TweenValue' {
    export class TweenValue {
        x: number;
        y: number;
        z: number;
        w: number;
        constructor();
        get color(): number;
        set color(value: number);
        getField(index: number): number;
        setField(index: number, value: number): void;
        setZero(): void;
    }
}

declare module 'fairygui-three/utils/html/IHtmlObject' {
    import { HtmlElement } from "fairygui-three/utils/html/HtmlElement";
    import { RichTextField } from "fairygui-three/core/text/RichTextField";
    import { DisplayObject } from "fairygui-three/core/DisplayObject";
    export interface IHtmlObject {
        width: number;
        height: number;
        displayObject: DisplayObject;
        element: HtmlElement;
        create(owner: RichTextField, element: HtmlElement): void;
        setPosition(x: number, y: number): void;
        add(): void;
        remove(): void;
        release(): void;
        dispose(): void;
    }
}

declare module 'fairygui-three/tween/GPathPoint' {
    export enum CurveType {
        CRSpline = 0,
        Bezier = 1,
        CubicBezier = 2,
        Straight = 3
    }
    export class GPathPoint {
        x: number;
        y: number;
        control1_x: number;
        control1_y: number;
        control2_x: number;
        control2_y: number;
        curveType: number;
        constructor();
        static newPoint(x: number, y: number, curveType: number): GPathPoint;
        static newBezierPoint(x: number, y: number, control1_x: number, control1_y: number): GPathPoint;
        static newCubicBezierPoint(x: number, y: number, control1_x: number, control1_y: number, control2_x: number, control2_y: number): GPathPoint;
        clone(): GPathPoint;
    }
}

